name: Nightly Build - iOS

on:
  schedule:
  - cron: "45 23 * * *"
  repository_dispatch:
   types: iosnightly  
jobs:  
  buildios:
    name: "Nightly Build - iOS"
    env:
        ANDROID_HOME: "/Users/runner/Library/Android/sdk"
        ScreenshotFolder: "/Users/runner/screenshots"
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        Device: "iPhone 11 (13.7)"
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Cache Simulator Data
      run: echo ::set-env name=IOSSIMULATORS::"$(xcrun simctl list devices --j | jq -c -j '.devices | to_entries[] | (.key | capture("com\\.apple\\.CoreSimulator\\.SimRuntime\\.iOS-(?<version>.+)")) as {$version} | .value[] | {name:"\(.name) (\($version|sub("-"; ".")))", udid}')"    
          
    #- name: Create Docker VM
    #  shell: bash
    #  run: |
    #    mkdir -p /Users/runner/.docker/machine/cache
    #    curl -Lo ~/.docker/machine/cache/boot2docker.iso https://github.com/boot2docker/boot2docker/releases/download/v19.03.5/boot2docker.iso
    #    base=https://github.com/docker/machine/releases/download/v0.16.0 &&
    #    curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/usr/local/bin/docker-machine &&
    #    chmod +x /usr/local/bin/docker-machine
    #    docker-machine create --driver virtualbox default
    #    DOCKER_IP="$( docker-machine ip default )";
    #    echo ::set-env name=localhostaddress::${DOCKER_IP}
    #    mkdir -p /Users/runner/temp
    #    curl -Lo ~/temp/docker-19.03.8.tgz  https://download.docker.com/mac/static/stable/x86_64/docker-19.03.8.tgz
    #    tar xzvf /Users/runner/temp/docker-19.03.8.tgz
    #    sudo cp docker/docker /usr/local/bin/    
    #    docker-machine restart
    #    eval $(docker-machine env default) 
    #    docker info
    #    docker network ls    
    #    # Export variable (this target)
    #    DOCKER_TLS_VERIFY="$(   docker-machine env default | grep DOCKER_TLS_VERIFY   | sed -e 's/.*="//g' -e 's/"$//g' )"
    #    DOCKER_HOST="$(         docker-machine env default | grep DOCKER_HOST         | sed -e 's/.*="//g' -e 's/"$//g' )"
    #    DOCKER_CERT_PATH="$(    docker-machine env default | grep DOCKER_CERT_PATH    | sed -e 's/.*="//g' -e 's/"$//g' )"
    #    DOCKER_MACHINE_NAME="$( docker-machine env default | grep DOCKER_MACHINE_NAME | sed -e 's/.*="//g' -e 's/"$//g' )"
    #    DOCKER_IP="$( docker-machine ip default )";
    #    # Export variable (this other targets)
    #    # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions#set-an-environment-variable-set-env
    #    echo ::set-env name=DOCKER_TLS_VERIFY::${DOCKER_TLS_VERIFY}
    #    echo ::set-env name=DOCKER_HOST::${DOCKER_HOST}
    #    echo ::set-env name=DOCKER_CERT_PATH::${DOCKER_CERT_PATH}
    #    echo ::set-env name=DOCKER_MACHINE_NAME::${DOCKER_MACHINE_NAME}
    #    echo ::set-env name=localhostaddress::${DOCKER_IP}
    #- name: testing
    #  run: xcrun instruments -s devices
      
    - name: Setup Nuget
      uses: olegtarasov/download-nuget@v1
          
    - name: Restore Nuget Packages
      run: mono $NUGET_EXE restore TransactionMobile/TransactionMobile.sln -source "https://api.nuget.org/v3/index.json;https://www.myget.org/F/transactionprocessing/api/v3/index.json"

    - name: Build Code
      run: msbuild /p:Configuration="Release" /p:Platform="iPhoneSimulator" /t:Build TransactionMobile/TransactionMobile.sln

    - name: Create Screenshot Folder
      run: mkdir -p /Users/runner/screenshots
      
    #- name: Run Integration Tests - iOS
    #  run: mono ./TransactionMobile/packages/NUnit.ConsoleRunner.3.11.1/tools/nunit3-console.exe TransactionMobile/TransactionMobile.IntegrationTests/bin/Release/TransactionMobile.IntegrationTests.dll --where "cat == iOS"   

    - uses: actions/upload-artifact@v2.2.1
      if: failure()
      with:
        name: screenshots
        path: /Users/runner/screenshots/**/*